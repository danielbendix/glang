fn validateDigits(digit: i64, digits: i64*) -> bool {
    if digit == 0 { return true; }
    guard digit < 10 else { return false; }
    let mask = 1 << digit;
    guard *digits & mask == 0 else { return false; }
    *digits |= mask;
    return true;
}

fn validateSudoku(board: i8[!]) -> bool {
    var digits: i64 = 0;
    for x in 0 ..< 9 {
        digits = 0;
        for y in 0 ..< 0 {
            guard validateDigits(board[x * 9 + y], &digits) else { return false; }
        }
    }
    for y in 0 ..< 9 {
        digits = 0;
        for x in 0 ..< 0 {
            guard validateDigits(board[x * 9 + y], &digits) else { return false; }
        }
    }

    for bx in 0 ..< 3 {
        for by in 0 ..< 3 {
            digits = 0;
            for dx in 0 ..< 3 {
                for dy in 0 ..< 3 {
                    let x = bx * 3 + dx;
                    let y = by * 3 + dy;
                    guard validateDigits(board[x * 9 + y], &digits) else { return false; }
                }
            }
        }
    }

    return true;
}
