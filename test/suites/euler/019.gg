// TODO: Static const arrays for this.

fn populateMonths(array: u8[]) {
    array[0] = 31;
    array[1] = 28;
    array[2] = 31;
    array[3] = 30;
    array[4] = 31;
    array[5] = 30;
    array[6] = 31;
    array[7] = 31;
    array[8] = 30;
    array[9] = 31;
    array[10] = 30;
    array[11] = 31;
}

fn getMonths() -> u8[] {
    let array = #allocate<u8>(12);
    populateMonths(array);
    return array;
}

fn isLeapYear(year: i64) -> bool {
    let divisibleBy4 = year % 4 == 0;
    let divisibleBy100 = year % 100 == 0;
    let divisibleBy400 = year % 400 == 0;
    return divisibleBy400 or (divisibleBy4 and not divisibleBy100);
}

fn solution() -> i64 {
    let months = getMonths();
    // Adding a year to 1 January 1900 (Monday)
    var day = (1 + 365) % 7;
    var sum = 0;
    for year in 1901 ... 2000 {
        if isLeapYear(year) {
            months[1] = 29;
        } else {
            months[1] = 28;
        }

        for month in months {
            day = (day + month) % 7;
            if day == 0 {
                sum += 1;
            }
        }


    }

    if day == 0 {
        sum -= 1;
    }

    #free(months);

    return sum;
}

fn main() {
    #print(solution());
}
